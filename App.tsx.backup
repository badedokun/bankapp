/**
 * OrokiiPay Multi-Tenant Money Transfer System
 * Main App Component with Navigation
 */

import React, { useState, useEffect, useCallback } from 'react';
import { SafeAreaView, StyleSheet, Text, Platform } from 'react-native';
import { TenantProvider, useTenant } from './src/tenants/TenantContext';
import { TenantThemeProvider, useTenantTheme } from './src/context/TenantThemeContext';
import { BankingAlertProvider } from './src/services/AlertService';
import { ModernNotificationProvider } from './src/services/ModernNotificationService';
import LoadingScreen from './src/components/common/LoadingScreen';
import WebNavigator from './src/navigation/WebNavigator';
import APIService from './src/services/api';
// TEMPORARILY DISABLED FOR ANDROID TESTING
// import DemoAuthManager from './src/utils/demoAuth';
import DeploymentManager from './src/config/deployment';
import { Storage } from './src/utils/storage';

// Import test helper only in web development mode
if (Platform.OS === 'web' && process.env.NODE_ENV === 'development') {
  require('./src/utils/authTestHelper');
}

const AppContent: React.FC = () => {
  const { currentTenant, isLoading, error } = useTenant();
  const { theme } = useTenantTheme();
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Check authentication status on app start
  useEffect(() => {
    // IMPORTANT: Check for existing authentication on app launch
    // This allows users to stay logged in across page refreshes
    checkAuthStatus();

    // Web-only: Listen for storage changes (in case login happens in another tab or component)
    if (Platform.OS === 'web' && typeof window !== 'undefined') {
      const handleStorageChange = (e: StorageEvent) => {
        if (e.key === 'access_token') {
          if (e.newValue) {
            setIsAuthenticated(true);
          } else {
            setIsAuthenticated(false);
          }
        }
      };

      window.addEventListener('storage', handleStorageChange);

      // Also listen for custom auth events
      const handleAuthChange = (e: CustomEvent) => {
        checkAuthStatus();
      };

      window.addEventListener('authStateChanged' as any, handleAuthChange);

      return () => {
        window.removeEventListener('storage', handleStorageChange);
        window.removeEventListener('authStateChanged' as any, handleAuthChange);
      };
    }
  }, []);

  const checkAuthStatus = async () => {
    try {
      // First check if we have a token in storage (platform-safe)
      const token = await Storage.getItem('access_token');
      if (token) {
        setIsAuthenticated(true);
        // Verify token validity in background (don't block UI)
        APIService.isAuthenticated().then((valid) => {
          if (!valid) {
            setIsAuthenticated(false);
          }
        }).catch(() => {
          // Token validation failed, but keep user logged in for now
        });
      } else {
        setIsAuthenticated(false);
      }
    } catch (error) {
      setIsAuthenticated(false);
    }
  };

  const handleLogin = useCallback(async () => {
    setIsAuthenticated(true);
  }, []);

  const handleLogout = useCallback(async () => {
    try {
      await APIService.logout();
      // TEMPORARILY DISABLED FOR ANDROID TESTING
      // await DemoAuthManager.clearDemoAuth();
      setIsAuthenticated(false);
    } catch (error) {
      setIsAuthenticated(false);
    }
  }, []);

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (error) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.danger }]}>
        <Text style={[styles.errorTitle, { color: '#ffffff' }]}>
          Error Loading App
        </Text>
        <Text style={[styles.errorMessage, { color: '#ffffff' }]}>
          {error.message}
        </Text>
      </SafeAreaView>
    );
  }

  return (
    <ModernNotificationProvider>
      <BankingAlertProvider>
        <WebNavigator
          isAuthenticated={isAuthenticated}
          onLogin={handleLogin}
        />
      </BankingAlertProvider>
    </ModernNotificationProvider>
  );
};

const App: React.FC = () => {
  return (
    <TenantProvider>
      <TenantThemeProvider>
        <AppContent />
      </TenantThemeProvider>
    </TenantProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 16,
  },
  errorMessage: {
    fontSize: 16,
    textAlign: 'center',
    paddingHorizontal: 24,
  },
});

export default App;